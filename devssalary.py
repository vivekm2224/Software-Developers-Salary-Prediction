# -*- coding: utf-8 -*-
"""DevsSalary.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IqHOl8pNBT_XCO3j0lLtW7MogTJPryVZ
"""

import pandas as pd
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')

path="/content/drive/MyDrive/dataset/Salary.csv"

df=pd.read_csv(path)

df.isnull().sum()

df = df.dropna(subset=['ConvertedCompYearly'])


print(df.isnull().sum())

print(df.shape)

df.head(100)

df.isnull().sum()

df = df.dropna(subset=['Country'])


print(df.isnull().sum())

df = df.sort_values(by='Country')

df.head(5)

df = df.dropna(subset=['YearsCodePro'])
df = df.rename({"ConvertedCompYearly": "Salary"}, axis=1)
print(df.isnull().sum())
df.to_csv('/content/drive/MyDrive/dataset/sorted_salary.csv', index=False)

path="/content/drive/MyDrive/dataset/sorted_salary.csv"

df=pd.read_csv(path)

df = df.rename({"ConvertedCompYearly": "Salary"}, axis=1)
df.head()

df["EdLevel"].unique()

def edu(x):
    if 'Bachelor’s degree' in x:
        return 'Bachelor’s degree'
    if 'Master’s degree' in x:
        return 'Master’s degree'
    if 'Professional degree' in x or 'Other doctoral' in x:
        return 'Post grad'
    return 'Less than a Bachelors'

df['EdLevel'] = df['EdLevel'].apply(edu)

df.head()

df["EdLevel"].unique()

df['Country'].value_counts()

def simplify(categories, cutoff):
    ans = {}
    for i in range(len(categories)):
        if categories.values[i] >= cutoff:
            ans[categories.index[i]] = categories.index[i]
        else:
            ans[categories.index[i]] = 'Other'
    return ans

country_map = simplify(df.Country.value_counts(), 400)
df['Country'] = df['Country'].map(country_map)
df.Country.value_counts()

df = df[["Country", "EdLevel", "YearsCodePro", "Salary"]]

df['YearsCodePro'].unique()

def exp(x):
    if x ==  'More than 50 years':
        return 51
    if x == 'Less than 1 year':
        return 0.5
    return float(x)

df['YearsCodePro'] = df['YearsCodePro'].apply(exp)

df['YearsCodePro'].unique()

from sklearn.preprocessing import LabelEncoder
edu = LabelEncoder()
df['EdLevel'] = edu.fit_transform(df['EdLevel'])
df['EdLevel'].unique()

df["Country"].unique()

X = df.drop("Salary" , axis = 1)
y = df['Salary']

from sklearn.linear_model  import LinearRegression
linear_reg = LinearRegression()
linear_reg.fit(X , y.values)

y_pred = linear_reg.predict(X)

from sklearn.metrics import mean_squared_error , mean_absolute_error
import numpy as np
error = np.sqrt(mean_squared_error(y , y_pred))

from sklearn.tree import DecisionTreeRegressor

dtr = DecisionTreeRegressor(random_state = 0)
dtr.fit(X,y.values)

y_pred = dtr.predict(X)

error = np.sqrt(mean_squared_error(y,y_pred))
print("${:,.02f}".format(error))
error

# Define the columns to be merged
columns_to_merge = [
    'LanguageHaveWorkedWith', 'DatabaseHaveWorkedWith', 'WebframeHaveWorkedWith',
    'MiscTechHaveWorkedWith', 'ToolsTechHaveWorkedWith', 'NEWCollabToolsHaveWorkedWith',
    'OpSysPersonal use', 'OpSysProfessional use', 'OfficeStackAsyncHaveWorkedWith',
    'OfficeStackSyncHaveWorkedWith', 'AISearchHaveWorkedWith'
]


df[columns_to_merge] = df[columns_to_merge].fillna('')


df['Skills'] = df[columns_to_merge].apply(lambda row: ';'.join(row.values.astype(str)), axis=1)


df['Skills'] = df['Skills'].apply(lambda x: ';'.join(sorted(set(x.split(';')))))


print(df[['Skills']].head())

df.drop(columns=columns_to_merge, inplace=True)



df.to_csv(path, index=False)

print(f"DataFrame saved to {path}")



df.head()

df.drop(columns='AIDevHaveWorkedWith', inplace=True)

df.to_csv(path, index=False)

print(f"DataFrame saved to {path}")